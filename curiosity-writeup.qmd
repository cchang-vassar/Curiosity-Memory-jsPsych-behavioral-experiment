---
title: "Effects of Initial Curiosity and Prediction Error on Explicit and Incidental Memory Formation"
authors: "Cherrie Chang, Amaavi Miriyagalla, Jasmine Shao"
format: html
editor: visual
---

```{r}
#| label: Load R libraries
#| echo: false
#| message: false

library(osfr)
library(readr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ez)
```

```{r}
#| label: Retrieve the data from OSF
#| echo: false
#| include: false

osf_retrieve_node("ubnxa") %>%
  osf_ls_files() %>%
  osf_download(path = "data/", conflicts = "skip")
```

```{r}
#| label: Convert Files from JSON to CSV
#| echo: false
#| include: false

files <- list.files("data", full.names = TRUE)
data <- lapply(files, fromJSON) %>%
  bind_rows()

```

## Introduction

## Methods

```{r}
#| label: Load the Data
#| message: false
#| echo: false

behavioral.data <- read.csv('data/behavioral.csv')
```

```{r}
#| label: Count the Number of Subjects
#| echo: false

n.subjects <- behavioral.data %>%
  pull(subject) %>%
  unique() %>%
  length()
```

### Pre-Registration & Open Materials

All stimuli, experiment scripts, data, and analysis scripts are available on the Open Science Framework at <https://osf.io/v35df/>. The pre-registration for this study is also available at <https://osf.io/w3qh4>. This study was approved by the Vassar College Institutional Review Board, and all participants provided informed consent prior to their participation.

### Participants

### Procedure

## Results

```{r}
#| label: delete practice trials
#| echo: false
#| include: false

data <- data %>%
  filter(trial_index %in% c(6:167))

```

```{r}
#| label: filter out unnecessary columns
#| echo: false
#| include: false

data.filtered <- subset(data, select = -c(success, timeout, internal_node_id, prolific_id, failed_images, failed_audio, failed_video, study_id))
```

```{r}
#| label: update task column to differentiate between prediction, likert, fractals and trivia
#| echo: false
#| include: false

for(i in 1:nrow(data.filtered)) {
  if (!is.na(data.filtered$difference[i])) {
    data.filtered$task[i] <- "trivia"
  }
  else if (data.filtered$trial_type[i] == "survey-text") {
    data.filtered$task[i] <- "prediction"
  }
  else if (data.filtered$trial_type[i] == "survey") {
    data.filtered$task[i] <- "likert"
  }
  else if (data.filtered$response[i] == 'f' || data.filtered$response[i] == 'j') {
    data.filtered$task[i] <- "fractal_response"
  }
  else {
    data.filtered$task[i] <- "NULL"
  }
}
```

```{r}
#| label: add correct answer back to each question asked in first 30 trials
#| echo: false
#| include: false

data.filtered.flips <- data.filtered %>%
  filter(grepl("flip", data.filtered$stimulus)) %>%
  mutate(stimulus_key = NA)

for (i in 1:nrow(data.filtered.flips)) {
  if (grepl("iPhone", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "2007"
    data.filtered.flips$stimulus_key[i] = "iPhone"
  }
  else if (grepl("Indian classical dance", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "28"
    data.filtered.flips$stimulus_key[i] = "Indian classical dance"
  }
  else if (grepl("Stephen King", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "65"
    data.filtered.flips$stimulus_key[i] = "Stephen King"
  }
  else if (grepl("diameter", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "7917.5"
    data.filtered.flips$stimulus_key[i] = "diameter"
  }
  else if (grepl("Vietnamese", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "6"
    data.filtered.flips$stimulus_key[i] = "Vietnamese"
  }
  else if (grepl("Berlin Wall", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1989"
    data.filtered.flips$stimulus_key[i] = "Berlin Wall"
  }
  else if (grepl("Muslims", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "5"
    data.filtered.flips$stimulus_key[i] = "Muslims"
  }
  else if (grepl("How many countries are in Africa?", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "54"
    data.filtered.flips$stimulus_key[i] = "How many countries are in Africa?"
  }
  else if (grepl("Baker's Dozen", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "13"
    data.filtered.flips$stimulus_key[i] = "Baker's Dozen"
  }
  else if (grepl("stitches", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "108"
    data.filtered.flips$stimulus_key[i] = "stitches"
  }
  else if (grepl("constellations", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "88"
    data.filtered.flips$stimulus_key[i] = "constellations"
  }
  else if (grepl("Frida", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1907"
    data.filtered.flips$stimulus_key[i] = "Frida"
  }
  else if (grepl("Great Wall of China", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "13171"
    data.filtered.flips$stimulus_key[i] = "Great Wall of China"
  }
  else if (grepl("human baby", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "300"
    data.filtered.flips$stimulus_key[i] = "human baby"
  }
  else if (grepl("How many countries in Africa have French as the official language?", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "21"
    data.filtered.flips$stimulus_key[i] = "How many countries in Africa have French as the official language?"
  }
  else if (grepl("titanic", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1912"
    data.filtered.flips$stimulus_key[i] = "titanic"
  }
  else if (grepl("Catholic Bible", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "73"
    data.filtered.flips$stimulus_key[i] = "Catholic Bible"
  }
  else if (grepl("Japan", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "4"
    data.filtered.flips$stimulus_key[i] = "Japan"
  }
  else if (grepl("vegan", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "79"
    data.filtered.flips$stimulus_key[i] = "vegan"
  }
  else if (grepl("Olympic", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1896"
    data.filtered.flips$stimulus_key[i] = "Olympic"
  }
  else if (grepl("Neptune", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "14"
    data.filtered.flips$stimulus_key[i] = "Neptune"
  }
  else if (grepl("sonnet", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "14"
    data.filtered.flips$stimulus_key[i] = "sonnet"
  }
  else if (grepl("Nobel", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1901"
    data.filtered.flips$stimulus_key[i] = "Nobel"
  }
  else if (grepl("kangaroos", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "4"
    data.filtered.flips$stimulus_key[i] = "kangaroos"
  }
  else if (grepl("Burj Khalifa", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "163"
    data.filtered.flips$stimulus_key[i] = "Burj Khalifa"
  }
  else if (grepl("King Tut", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "19"
    data.filtered.flips$stimulus_key[i] = "King Tut"
  }
  else if (grepl("bar mitzvah", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "13"
    data.filtered.flips$stimulus_key[i] = "bar mitzvah"
  }
  else if (grepl("Arctic", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "8"
    data.filtered.flips$stimulus_key[i] = "Arctic"
  }
  else if (grepl("calendar", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "12"
    data.filtered.flips$stimulus_key[i] = "calendar"
  }
  else if (grepl("soccer", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "11"
    data.filtered.flips$stimulus_key[i] = "soccer"
  }
}

data.filtered.flips <- data.filtered.flips %>%
  select(c('stimulus', 'stimulus_key', 'correct_answer'))
```

```{r}
#| label: join the correct answer column back into main dataframe
#| echo: false
#| include: false

data.filtered.correct <- left_join(data.filtered, data.filtered.flips, by="stimulus")
data.filtered.correct <- data.filtered.correct %>%
  select(-c(stimulus)) %>%
  group_by(session_id) %>%
  distinct(trial_index, .keep_all = TRUE)

for (i in 1:nrow(data.filtered.correct)) {
  currentKey <- data.filtered.correct$stimulus_key[i]
  if (!is.na(currentKey)) {
    data.filtered.correct$stimulus_key[i-1] = currentKey
    data.filtered.correct$stimulus_key[i-2] = currentKey
  }
}

for (i in 1:nrow(data.filtered.correct)) {
  currentKey <- data.filtered.correct$correct_answer[i]
  if (!is.na(currentKey)) {
    data.filtered.correct$correct_answer[i-1] = currentKey
    data.filtered.correct$correct_answer[i-2] = currentKey
  }
}
```

```{r}
#| label: calculate IPE values in separate dataframe
#| There is a single row where the prediction entered by the subject is so large that
#| the difference between their answer and the correct answer is computed to NA in R.
#| We thus hard-coded the actual difference value in the if statement below.
#| echo: false
#| include: false

data.IPE <- filter(data.filtered.correct, (task == "prediction") | (!is.na(correct_answer)))
data.IPE <- mutate(data.IPE, IPE = "NA")
for (i in seq(from = 2, to = nrow(data.IPE), by = 2)) {
  data.IPE$IPE[i] = abs((as.integer(data.IPE$correct_answer[i]) - as.integer(data.IPE[i-1, ]$response[[1]]$prediction[1])))
  if (is.na(data.IPE$IPE[i])) {
    data.IPE$IPE[i] = 437289472301
  }
}
```

```{r}
#| label: join the IPE column back into main dataframe
#| echo: false
#| include: false

data.IPE.filtered <- data.IPE %>%
  filter(IPE != "NA") %>%
  select(c('trial_index', 'session_id', "IPE"))

data.filtered.correct <- left_join(data.filtered.correct, data.IPE.filtered, by = c('session_id', 'trial_index'))
```

```{r}
#| label: Exclude Subjects Who Got >20 Questions Correct in the Initial Round
#| message: false
#| echo: false

data.smart.subs <- data.IPE.filtered %>%
  group_by(session_id) %>%
  count(IPE == 0) %>%
  filter(`IPE == 0` == "TRUE")
```

```{r}
#| label: Exclude Subjects Who Do Not Have Variable Responses to Write-in/Scale Questions
#| message: false
#| echo: false

data.consistent.subs <- data.IPE %>%
  filter(task == "prediction") %>%
  mutate(response_num = NA)

for (i in 1:nrow(data.consistent.subs)) {
  data.consistent.subs$response_num[i] = format(as.numeric(data.consistent.subs[i, ]$response[[1]]$prediction[1]), scientific = FALSE)
}

data.consistent.subs.count <- data.consistent.subs %>%
  group_by(session_id) %>%
  summarize(unique_predictions = n_distinct(response_num))
```

### Z-Scores

```{r}
#| label: Prediction Error Z-Scores (each participant AND each question)
#| message: false
#| echo: false

data.filtered.correct.IPE<- data.filtered.correct %>%
  filter(task == "prediction") %>%
  group_by(stimulus_key) %>%
  mutate(IPE_num = NA) %>%
  select(-c(IPE))

for (i in 1:nrow(data.filtered.correct.IPE)) {
  data.filtered.correct.IPE$IPE_num[i] = (as.numeric(data.filtered.correct.IPE$correct_answer[i]) - as.integer(data.filtered.correct.IPE[i, ]$response[[1]]$prediction[1]))
}
  
data.filtered.correct.IPE <- data.filtered.correct.IPE %>%
  drop_na(IPE_num) %>%
  select(trial_index, session_id, stimulus_key, IPE_num)

z.scores.IPE <- data.filtered.correct.IPE %>%
  group_by(stimulus_key) %>%
  mutate(IPE_mean = mean(IPE_num)) %>%
  mutate(IPE_sd = sd(IPE_num)) %>%
  mutate(z_score_IPE = (IPE_num - IPE_mean) / IPE_sd)

ggplot(z.scores.IPE, aes(x = session_id, y = z_score_IPE)) +
  geom_point(size = 0.5) +
  facet_wrap(~ stimulus_key) 
```

```{r}
#| label: Curiosity Z-Scores (each participant)
#| message: false
#| echo: false

data.filtered.correct.curiosity <- data.filtered.correct %>%
  filter(task == "likert") %>%
  group_by(session_id) %>%
  mutate(curiosity_num = NA)

for (i in 1:nrow(data.filtered.correct.curiosity)) {
  data.filtered.correct.curiosity$curiosity_num[i] = as.integer(data.filtered.correct.curiosity[i, ]$response[[1]]$curiosity[1])
}
  

data.filtered.correct.curiosity <- data.filtered.correct.curiosity %>%
  select(trial_index, session_id, stimulus_key, curiosity_num)

z.scores.curiosity <- data.filtered.correct.curiosity %>%
  group_by(session_id) %>%
  mutate(curiosity_mean = mean(curiosity_num)) %>%
  mutate(curiosity_sd = sd(curiosity_num)) %>%
  mutate(z_score_curiosity = (curiosity_num - curiosity_mean) / curiosity_sd)

ggplot(z.scores.curiosity, aes(x = stimulus_key, y = z_score_curiosity)) +
  geom_point(size = 0.5) +
  facet_wrap(~ session_id) 
```

### Regressions

```{r}
#| label: add stimulus key back for trivia questions
#| echo: false
#| include: false

data.filtered.trivia <- data.filtered.correct %>%
  filter(task == "trivia") %>%
  select(-c('trial_type', 'accuracy', 'correct', 'time_elapsed', 'rt', 'correct_answer', 'IPE')) %>%
  select(c('task', 'trial_index', 'session_id', 'stimulus_key', 'response', 'correct_response', 'difference'))

for (i in 1:nrow(data.filtered.trivia)) {
  if (data.filtered.trivia$correct_response[i] == "2007") {
    data.filtered.trivia$stimulus_key[i] = "iPhone"
  }
  else if (data.filtered.trivia$correct_response[i] == "28") {
    data.filtered.trivia$stimulus_key[i] = "Indian classical dance"
  }
  else if (data.filtered.trivia$correct_response[i] == "65") {
    data.filtered.trivia$stimulus_key[i] = "Stephen King"
  }
  else if (data.filtered.trivia$correct_response[i] == "7917.5") {
    data.filtered.trivia$stimulus_key[i] = "diameter"
  }
  else if (data.filtered.trivia$correct_response[i] == "6") {
    data.filtered.trivia$stimulus_key[i] = "Vietnamese"
  }
  else if (data.filtered.trivia$correct_response[i] == "1989") {
    data.filtered.trivia$stimulus_key[i] = "Berlin Wall"
  }
  else if (data.filtered.trivia$correct_response[i] == "5") {
    data.filtered.trivia$stimulus_key[i] = "Muslims"
  }
  else if (data.filtered.trivia$correct_response[i] == "54") {
    data.filtered.trivia$stimulus_key[i] = "How many countries are in Africa?"
  }
  else if (data.filtered.trivia$correct_response[i] == "108") {
    data.filtered.trivia$stimulus_key[i] = "stitches"
  }
  else if (data.filtered.trivia$correct_response[i] == "88") {
    data.filtered.trivia$stimulus_key[i] = "constellations"
  }
  else if (data.filtered.trivia$correct_response[i] == "1907") {
    data.filtered.trivia$stimulus_key[i] = "Frida"
  }
  else if (data.filtered.trivia$correct_response[i] == "13171") {
    data.filtered.trivia$stimulus_key[i] = "Great Wall of China"
  }
  else if (data.filtered.trivia$correct_response[i] == "300") {
    data.filtered.trivia$stimulus_key[i] = "human baby"
  }
  else if (data.filtered.trivia$correct_response[i] == "21") {
    data.filtered.trivia$stimulus_key[i] = "How many countries in Africa have French as the official language?"
  }
  else if (data.filtered.trivia$correct_response[i] == "1912") {
    data.filtered.trivia$stimulus_key[i] = "titanic"
  }
  else if (data.filtered.trivia$correct_response[i] == "73") {
    data.filtered.trivia$stimulus_key[i] = "Catholic Bible"
  }
  else if (data.filtered.trivia$correct_response[i] == "79") {
    data.filtered.trivia$stimulus_key[i] = "vegan"
  }
  else if (data.filtered.trivia$correct_response[i] == "1896") {
    data.filtered.trivia$stimulus_key[i] = "Olympic"
  }
  else if (data.filtered.trivia$correct_response[i] == "1901") {
    data.filtered.trivia$stimulus_key[i] = "Nobel"
  }
  else if (data.filtered.trivia$correct_response[i] == "163") {
    data.filtered.trivia$stimulus_key[i] = "Burj Khalifa"
  }
  else if (data.filtered.trivia$correct_response[i] == "19") {
    data.filtered.trivia$stimulus_key[i] = "King Tut"
  }
  else if (data.filtered.trivia$correct_response[i] == "8") {
    data.filtered.trivia$stimulus_key[i] = "Arctic"
  }
  else if (data.filtered.trivia$correct_response[i] == "12") {
    data.filtered.trivia$stimulus_key[i] = "calendar"
  }
  else if (data.filtered.trivia$correct_response[i] == "11") {
    data.filtered.trivia$stimulus_key[i] = "soccer"
  }
}
```

```{r}
#| label: merge curiosity z score and IPE z score into trivia dataframe
#| message: false
#| echo: false

data.filtered.trivia.simplified <- data.filtered.trivia %>%
  select(c('session_id', 'stimulus_key', 'difference'))

z.scores.curiosity.simplified <- z.scores.curiosity %>%
  select(c('session_id', 'stimulus_key', 'z_score_curiosity'))

z.scores.IPE.simplified <- z.scores.IPE %>%
  select(c('session_id', 'stimulus_key', 'z_score_IPE'))

data.filtered.trivia.merged <- left_join(drop_na(data.filtered.trivia.simplified), z.scores.curiosity.simplified, by = c('session_id', 'stimulus_key'))

data.filtered.trivia.merged <- left_join(data.filtered.trivia.merged, z.scores.IPE.simplified, by = c('session_id', 'stimulus_key'))

#| data.filtered.trivia.merged <- drop_na(data.filtered.trivia.merged)
```

```{r}
#| label: Explicit Memory Regression
#| message: false
#| echo: false

explicit.memory.regression <- lm(data.filtered.trivia.merged$difference ~ data.filtered.trivia.merged$z_score_curiosity + data.filtered.trivia.merged$z_score_IPE + (data.filtered.trivia.merged$z_score_curiosity * data.filtered.trivia.merged$z_score_IPE))
```

```{r}
#| label: Incidental Memory Regression
#| message: false
#| echo: false
```

## Discussion

## References

Cervera, R. L., Wang, M. Z., & Hayden, B. Y. (2020). Systems neuroscience of curiosity. Current Opinion in Behavioral Sciences, 35, 48--55. https://doi.org/10.1016/j.cobeha. 2020.06.011

Fernández, R. S., Boccia, M. M., & Pedreira, M. E. (2016). The fate of memory: Reconsolidation and the case of prediction error. Neuroscience & Biobehavioral Reviews, 68, 423--441. https://doi.org/10.1016/j.neubiorev.2016.06.004

Gruber, M. J., Gelman, B. D., & Ranganath, C. (2014). States of curiosity modulate hippocampus-dependent learning via the dopaminergic circuit. Neuron, 84(2), 486--496. https://doi.org/10.1016/j.neuron.2014.08.060

Kang, M. J., Hsu, M., Krajbich, I. M., Loewenstein, G., McClure, S. M., Wang, J. T., & Camerer, C. F. (2009). The Wick in the Candle of Learning: Epistemic Curiosity Activates Reward Circuitry and Enhances Memory. Psychological Science, 20(8), 963--973. https://doi.org/10.1111/j.1467-9280.2009.02402

van Lieshout, L. L. F., de Lange, F. P., & Cools, R. (2020). Why so curious? quantifying mechanisms of information seeking. Current Opinion in Behavioral Sciences, 35, 112--117. https://doi.org/10.1016/j.cobeha.2020.08.005

Wade, S., & Kidd, C. (2019). The role of prior knowledge and curiosity in learning. Psychonomic Bulletin & Review, 26(4), 1377--1387. https://doi.org/10.3758/s13423 -019-01598-6
