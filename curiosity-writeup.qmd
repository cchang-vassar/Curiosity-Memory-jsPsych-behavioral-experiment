---
title: "Effects of Initial Curiosity and Prediction Error on Explicit and Incidental Memory Formation"
authors: "Cherrie Chang, Amaavi Miriyagalla, Jasmine Shao"
format: html
editor: visual
---

```{r}
#| label: Load R libraries
#| echo: false
#| message: false

library(osfr)
library(readr)
library(jsonlite)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ez)
library(stringr)
```

```{r}
#| label: Retrieve the data from OSF
#| echo: false
#| include: false

osf_retrieve_node("ubnxa") %>%
  osf_ls_files() %>%
  osf_download(path = "data/", conflicts = "skip")
```

```{r}
#| label: Convert Files from JSON to CSV
#| echo: false
#| include: false

files <- list.files("data", full.names = TRUE)
data <- lapply(files, fromJSON) %>%
  bind_rows()

```

## Introduction

The present study explores the connection between curiosity and memory, where recent evidence suggests that higher levels of curiosity leads to improved memory of information. This supports the intuition that the more curious an individual is about a piece of information, the better they are at learning and remembering it. In practice, this positive correlation between curiosity and memory provides important implications for education and training in general. An approach inspired by these findings, for instance, would be to embed detailed material in topics students are highly curious about to improve their retention of the material.

In behavioral experiments testing the correlation between curiosity and memory, participants are typically shown a series of trivia questions and their answers, then tasked to recall the answers to the questions after a period of time. Evidence from an example of these studies by Kang et al. found that participants were better able to recall answers to questions that they were highly curious about, even after a 11-16 day period. These behavioral results are backed by neuroscientific evidence such as Gruber et al.'s fMRI study, which showed that when there is increased activity in brain areas related to curiosity, like midbrain activity and hippocampal activity during reward anticipation, memory for the preceding or subsequent material is improved. Importantly, this improved memory formation applies not only to the material being actively learned, but any material incidentally encountered during the process.

However, Gruber et al.'s study only tested for immediate memory retention or retention after one day, as opposed to the longer periods used by Kang. The incidental material used was also limited to faces. The two studies also differ in their interpretation of their neuroscientific data, with the Gruber team attributing midbrain and nucleus accumbens activation to the anticipation of an answer and curiosity, while Kang et al. observed that the same activations were often heightened for incorrectly guessed answers, thus tying them to prediction error generated by the difference between their incorrect guess and the revealed answer instead. This prediction error account is further developed in a report by Marvin et al., which hypothesized information prediction error as the essential factor in how curiosity drives memory formation, leading people to better remember information associated with larger prediction errors. Synthesizing across these studies, the essential factor in the mechanism by which curiosity drives memory is still unclear: the question remains whether it is the initial curiosity towards the answer itself, or the large prediction error generated by an incorrect guess made out of that initial curiosity, that ultimately improves memory formation.

The present study seeks to clarify and challenge the existing findings by 1) testing whether the positive correlation between curiosity and memory can be replicated, and 2) isolating the most relevant factor by which curiosity motivates memory formation for both original and incidental material. We hypothesize this factor to either be the subject's initial curiosity for the answer, or the more downstream prediction error (and associated emotions like surprise) generated by the difference between the revealed answer and the subject's predicted answer. We also introduce the subject's prior knowledge as a possible third, underlying factor explaining the connections of both initial curiosity and prediction error to memory, such that it is actually the subject's previous knowledge/memory of the answer that most strongly correlates with their ability to retain it.

![insert caption (later, prolly also have to change the text and stuff)](images/image-1394286366.png)

## **Hypothesis**

1.  Primary hypothesis: The higher the initial curiosity for the material to be learned, the better the memory retention of both the original and incidental material after learning.

2.  Secondary hypothesis: The larger the prediction error generated by the prediction of the material to be learned and the revealed material, the better the memory retention of both the original and incidental material after learning.

3.  Exploratory hypothesis: Level of prior knowledge of the material underlie both initial curiosity and prediction error of the answer, such that the higher the level of prior knowledge, the lesser the initial curiosity and the lower the prediction error generated.

## Methods

### Pre-Registration & Open Materials

All stimuli, experiment scripts, data, and analysis scripts are available on the Open Science Framework at <https://osf.io/v35df/>. The pre-registration for this study is also available at <https://osf.io/w3qh4>. This study was approved by the Vassar College Institutional Review Board, and all participants provided informed consent prior to their participation.

### Participants

### Procedure

## Results

```{r}
#| label: delete practice trials
#| echo: false
#| include: false

data <- data %>%
  filter(trial_index %in% c(6:167))

```

```{r}
#| label: filter out unnecessary columns
#| echo: false
#| include: false

data.filtered <- subset(data, select = c(trial_index, session_id, task, trial_type, stimulus, response, correct_response, difference, correct))
```

```{r}
#| label: update task column to differentiate between prediction, likert, fractals and trivia
#| echo: false
#| include: false

for(i in 1:nrow(data.filtered)) {
  if (!is.na(data.filtered$difference[i])) {
    data.filtered$task[i] <- "trivia"
  }
  else if (data.filtered$trial_type[i] == "survey-text") {
    data.filtered$task[i] <- "prediction"
  }
  else if (data.filtered$trial_type[i] == "survey") {
    data.filtered$task[i] <- "likert"
  }
  else if (data.filtered$response[i] == 'f' || data.filtered$response[i] == 'j') {
    data.filtered$task[i] <- "fractal_response"
  }
  else {
    data.filtered$task[i] <- "NULL"
  }
}
```

```{r}
#| label: add correct answer back to each question asked in first 30 trials
#| echo: false
#| include: false

data.filtered.flips <- data.filtered %>%
  filter(grepl("flip", data.filtered$stimulus)) %>%
  mutate(stimulus_key = NA)

for (i in 1:nrow(data.filtered.flips)) {
  if (grepl("iPhone", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "2007"
    data.filtered.flips$stimulus_key[i] = "iPhone"
  }
  else if (grepl("Indian classical dance", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "28"
    data.filtered.flips$stimulus_key[i] = "Indian classical dance"
  }
  else if (grepl("Stephen King", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "65"
    data.filtered.flips$stimulus_key[i] = "Stephen King"
  }
  else if (grepl("diameter", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "7917.5"
    data.filtered.flips$stimulus_key[i] = "diameter"
  }
  else if (grepl("Vietnamese", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "6"
    data.filtered.flips$stimulus_key[i] = "Vietnamese"
  }
  else if (grepl("Berlin Wall", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1989"
    data.filtered.flips$stimulus_key[i] = "Berlin Wall"
  }
  else if (grepl("Muslims", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "5"
    data.filtered.flips$stimulus_key[i] = "Muslims"
  }
  else if (grepl("How many countries are in Africa?", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "54"
    data.filtered.flips$stimulus_key[i] = "How many countries are in Africa?"
  }
  else if (grepl("Baker's Dozen", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "13"
    data.filtered.flips$stimulus_key[i] = "Baker's Dozen"
  }
  else if (grepl("stitches", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "108"
    data.filtered.flips$stimulus_key[i] = "stitches"
  }
  else if (grepl("constellations", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "88"
    data.filtered.flips$stimulus_key[i] = "constellations"
  }
  else if (grepl("Frida", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1907"
    data.filtered.flips$stimulus_key[i] = "Frida"
  }
  else if (grepl("Great Wall of China", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "13171"
    data.filtered.flips$stimulus_key[i] = "Great Wall of China"
  }
  else if (grepl("human baby", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "300"
    data.filtered.flips$stimulus_key[i] = "human baby"
  }
  else if (grepl("How many countries in Africa have French as the official language?", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "21"
    data.filtered.flips$stimulus_key[i] = "How many countries in Africa have French as the official language?"
  }
  else if (grepl("titanic", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1912"
    data.filtered.flips$stimulus_key[i] = "titanic"
  }
  else if (grepl("Catholic Bible", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "73"
    data.filtered.flips$stimulus_key[i] = "Catholic Bible"
  }
  else if (grepl("Japan", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "4"
    data.filtered.flips$stimulus_key[i] = "Japan"
  }
  else if (grepl("vegan", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "79"
    data.filtered.flips$stimulus_key[i] = "vegan"
  }
  else if (grepl("Olympic", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1896"
    data.filtered.flips$stimulus_key[i] = "Olympic"
  }
  else if (grepl("Neptune", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "14"
    data.filtered.flips$stimulus_key[i] = "Neptune"
  }
  else if (grepl("sonnet", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "14"
    data.filtered.flips$stimulus_key[i] = "sonnet"
  }
  else if (grepl("Nobel", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "1901"
    data.filtered.flips$stimulus_key[i] = "Nobel"
  }
  else if (grepl("kangaroos", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "4"
    data.filtered.flips$stimulus_key[i] = "kangaroos"
  }
  else if (grepl("Burj Khalifa", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "163"
    data.filtered.flips$stimulus_key[i] = "Burj Khalifa"
  }
  else if (grepl("King Tut", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "19"
    data.filtered.flips$stimulus_key[i] = "King Tut"
  }
  else if (grepl("bar mitzvah", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "13"
    data.filtered.flips$stimulus_key[i] = "bar mitzvah"
  }
  else if (grepl("Arctic", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "8"
    data.filtered.flips$stimulus_key[i] = "Arctic"
  }
  else if (grepl("calendar", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "12"
    data.filtered.flips$stimulus_key[i] = "calendar"
  }
  else if (grepl("soccer", data.filtered.flips$stimulus[i])) {
    data.filtered.flips$correct_answer[i] = "11"
    data.filtered.flips$stimulus_key[i] = "soccer"
  }
}

data.filtered.flips <- data.filtered.flips %>%
  select(c('stimulus', 'stimulus_key', 'correct_answer'))
```

```{r}
#| label: join the correct answer column back into main dataframe
#| echo: false
#| include: false

data.filtered.correct <- left_join(data.filtered, data.filtered.flips, by="stimulus")
data.filtered.correct <- data.filtered.correct %>%
  mutate(question_correct_answer = as.numeric(correct_answer)) %>%
  mutate(trivia_difference = as.numeric(difference)) %>%
  mutate(fractal_correct = correct)
```

```{r}
#| label: selecting in data.filtered.correct
#| echo: false
#| message: false

data.filtered.correct <- data.filtered.correct %>%
  select(c(trial_index, session_id, task, trial_type, stimulus_key, stimulus, response, question_correct_answer, correct_response, trivia_difference, fractal_correct)) %>%
  group_by(session_id) %>%
  distinct(trial_index, .keep_all = TRUE)
```

```{r}
#| label: extract fractal image number from stimulus
#| echo: false
#| include: false
#| message: false

img1Finder <- function(stimulus) {
  return(grepl("img/1.png", stimulus))
}

img2Finder <- function(stimulus) {
  return(grepl("img/2.png", stimulus))
}

img3Finder <- function(stimulus) {
  return(grepl("img/3.png", stimulus))
}
  
img4Finder <- function(stimulus) {
  return(grepl("img/4.png", stimulus))
}
  
img5Finder <- function(stimulus) {
  return(grepl("img/5.png", stimulus))
}

img6Finder <- function(stimulus) {
  return(grepl("img/6.png", stimulus))
}
  
img7Finder <- function(stimulus) {
  return(grepl("img/7.png", stimulus))
}
  
img8Finder <- function(stimulus) {
  return(grepl("img/8.png", stimulus))
}

img9Finder <- function(stimulus) {
  return(grepl("img/9.png", stimulus))
}

img10Finder <- function(stimulus) {
  return(grepl("img/10.png", stimulus))
}

img11Finder <- function(stimulus) {
  return(grepl("img/11.png", stimulus))
}

img12Finder <- function(stimulus) {
  return(grepl("img/12.png", stimulus))
}

img13Finder <- function(stimulus) {
  return(grepl("img/13.png", stimulus))
}

img14Finder <- function(stimulus) {
  return(grepl("img/14.png", stimulus))
}

img15Finder <- function(stimulus) {
  return(grepl("img/15.png", stimulus))
}

img16Finder <- function(stimulus) {
  return(grepl("img/16.png", stimulus))
}

img17Finder <- function(stimulus) {
  return(grepl("img/17.png", stimulus))
}

img18Finder <- function(stimulus) {
  return(grepl("img/18.png", stimulus))
}

img19Finder <- function(stimulus) {
  return(grepl("img/19.png", stimulus))
}

img20Finder <- function(stimulus) {
  return(grepl("img/20.png", stimulus))
}

img21Finder <- function(stimulus) {
  return(grepl("img/21.png", stimulus))
}

img22Finder <- function(stimulus) {
  return(grepl("img/22.png", stimulus))
}

img23Finder <- function(stimulus) {
  return(grepl("img/23.png", stimulus))
}

img24Finder <- function(stimulus) {
  return(grepl("img/24.png", stimulus))
}

img25Finder <- function(stimulus) {
  return(grepl("img/25.png", stimulus))
}

img26Finder <- function(stimulus) {
  return(grepl("img/26.png", stimulus))
}

img27Finder <- function(stimulus) {
  return(grepl("img/27.png", stimulus))
}

img28Finder <- function(stimulus) {
  return(grepl("img/28.png", stimulus))
}

img29Finder <- function(stimulus) {
  return(grepl("img/29.png", stimulus))
}

img30Finder <- function(stimulus) {
  return(grepl("img/30.png", stimulus))
}

data.filtered.fractals.trials <- data.filtered.correct %>%
  filter(task == "fractal_response" | grepl("flip_card", stimulus)) %>%
  filter(!((task == "fractal_response") & is.na(fractal_correct))) %>%
  mutate(fractal_img = ifelse(img1Finder(stimulus), 1,
                              ifelse(img2Finder(stimulus), 2, 
                                     ifelse(img3Finder(stimulus), 3, 
                                            ifelse(img4Finder(stimulus), 4, 
                                                   ifelse(img5Finder(stimulus), 5, 
                                                          ifelse(img6Finder(stimulus), 6,
                                                                 ifelse(img7Finder(stimulus), 7,
                                                                        ifelse(img8Finder(stimulus), 8,
                                                                               ifelse(img9Finder(stimulus), 9,
                                                                                      ifelse(img10Finder(stimulus), 10,
                                                                                             ifelse(img11Finder(stimulus), 11,
                                                                                                    ifelse(img12Finder(stimulus), 12,
                                                                                                           ifelse(img13Finder(stimulus), 13,
                                                                                                                  ifelse(img14Finder(stimulus), 14,
                                                                                                                         ifelse(img15Finder(stimulus), 15,
                                                                                                                                ifelse(img16Finder(stimulus), 16,
                                                                                                                                       ifelse(img17Finder(stimulus), 17,
                                                                                                                                              ifelse(img18Finder(stimulus), 18,
                                                                                                                                                     ifelse(img19Finder(stimulus), 19,
                                                                                                                                                            ifelse(img20Finder(stimulus), 20,
                                                                                                                                                                   ifelse(img21Finder(stimulus), 21,
                                                                                                                                                                          ifelse(img22Finder(stimulus), 22,
                                                                                                                                                                                 ifelse(img23Finder(stimulus), 23,
                                                                                                                                                                                        ifelse(img24Finder(stimulus), 24,
                                                                                                                                                                                               ifelse(img25Finder(stimulus), 25,
                                                                                                                                                                                                      ifelse(img26Finder(stimulus), 26,
                                                                                                                                                                                                             ifelse(img27Finder(stimulus), 27,
                                                                                                                                                                                                                    ifelse(img28Finder(stimulus), 28,
                                                                                                                                                                                                                           ifelse(img29Finder(stimulus), 29,
                                                                                                                                                                                                                                  ifelse(img30Finder(stimulus), 30, NA)))))))))))))))))))))))))))))))

data.filtered.fractals.trials <- data.filtered.fractals.trials %>%
  select(c("trial_index", "session_id", "task","stimulus", "fractal_img"))

data.count <- filter(data.filtered.fractals.trials, is.na(fractal_img))

data.filtered.correct <- left_join(data.filtered.correct, data.filtered.fractals.trials, by=c("trial_index", "session_id", "stimulus", "task"))
```

```{r}
#| label: update stimulus key, correct answer for all relevant rows
#| echo: false
#| include: false
#| message: false

for (i in 1:nrow(data.filtered.correct)) {
  currentKey <- data.filtered.correct$stimulus_key[i]
  if (!is.na(currentKey)) {
    data.filtered.correct$stimulus_key[i-1] = currentKey
    data.filtered.correct$stimulus_key[i-2] = currentKey
  }
}

for (i in 1:nrow(data.filtered.correct)) {
  currentKey <- data.filtered.correct$question_correct_answer[i]
  if (!is.na(currentKey)) {
    data.filtered.correct$question_correct_answer[i-1] = currentKey
    data.filtered.correct$question_correct_answer[i-2] = currentKey
  }
}
```

```{r}
#| label: extract numeric answer of subject response for prediction, curiosity and prior knowledge
#| echo: false
#| include: false
#| message: false

data.filtered.correct <- data.filtered.correct %>%
  mutate(prediction_num = NA) %>%
  mutate(curiosity_num = NA) %>%
  mutate(prior_knowledge_num = NA)

for (i in 1:nrow(data.filtered.correct)) {
  if (!is.na(data.filtered.correct$response[i])) {
    if (data.filtered.correct$task[i] == "prediction") {
      data.filtered.correct$prediction_num[i] = as.integer(data.filtered.correct[i, ]$response[[1]]$prediction[1])
    }
    else if (data.filtered.correct$task[i] == "likert") {
      data.filtered.correct$curiosity_num[i] = as.integer(data.filtered.correct[i, ]$response[[1]]$curiosity[1])
      data.filtered.correct$prior_knowledge_num[i] = as.integer(data.filtered.correct[i, ]$response[[1]]$`prior knowledge`)
    }
  }
}
```

```{r}
#| label: add stimulus key back for trivia questions
#| echo: false
#| include: false
#| message: false

data.filtered.trivia <- data.filtered.correct %>%
  filter(task == "trivia")

for (i in 1:nrow(data.filtered.trivia)) {
  if (data.filtered.trivia$correct_response[i] == 2007) {
    data.filtered.trivia$stimulus_key[i] = "iPhone"
  }
  else if (data.filtered.trivia$correct_response[i] == 28) {
    data.filtered.trivia$stimulus_key[i] = "Indian classical dance"
  }
  else if (data.filtered.trivia$correct_response[i] == 65) {
    data.filtered.trivia$stimulus_key[i] = "Stephen King"
  }
  else if (data.filtered.trivia$correct_response[i] == 7917.5) {
    data.filtered.trivia$stimulus_key[i] = "diameter"
  }
  else if (data.filtered.trivia$correct_response[i] == 6) {
    data.filtered.trivia$stimulus_key[i] = "Vietnamese"
  }
  else if (data.filtered.trivia$correct_response[i] == 1989) {
    data.filtered.trivia$stimulus_key[i] = "Berlin Wall"
  }
  else if (data.filtered.trivia$correct_response[i] == 5) {
    data.filtered.trivia$stimulus_key[i] = "Muslims"
  }
  else if (data.filtered.trivia$correct_response[i] == 54) {
    data.filtered.trivia$stimulus_key[i] = "How many countries are in Africa?"
  }
  else if (data.filtered.trivia$correct_response[i] == 108) {
    data.filtered.trivia$stimulus_key[i] = "stitches"
  }
  else if (data.filtered.trivia$correct_response[i] == 88) {
    data.filtered.trivia$stimulus_key[i] = "constellations"
  }
  else if (data.filtered.trivia$correct_response[i] == 1907) {
    data.filtered.trivia$stimulus_key[i] = "Frida"
  }
  else if (data.filtered.trivia$correct_response[i] == 13171) {
    data.filtered.trivia$stimulus_key[i] = "Great Wall of China"
  }
  else if (data.filtered.trivia$correct_response[i] == 300) {
    data.filtered.trivia$stimulus_key[i] = "human baby"
  }
  else if (data.filtered.trivia$correct_response[i] == 21) {
    data.filtered.trivia$stimulus_key[i] = "How many countries in Africa have French as the official language?"
  }
  else if (data.filtered.trivia$correct_response[i] == 1912) {
    data.filtered.trivia$stimulus_key[i] = "titanic"
  }
  else if (data.filtered.trivia$correct_response[i] == 73) {
    data.filtered.trivia$stimulus_key[i] = "Catholic Bible"
  }
  else if (data.filtered.trivia$correct_response[i] == 79) {
    data.filtered.trivia$stimulus_key[i] = "vegan"
  }
  else if (data.filtered.trivia$correct_response[i] == 1896) {
    data.filtered.trivia$stimulus_key[i] = "Olympic"
  }
  else if (data.filtered.trivia$correct_response[i] == 1901) {
    data.filtered.trivia$stimulus_key[i] = "Nobel"
  }
  else if (data.filtered.trivia$correct_response[i] == 163) {
    data.filtered.trivia$stimulus_key[i] = "Burj Khalifa"
  }
  else if (data.filtered.trivia$correct_response[i] == 19) {
    data.filtered.trivia$stimulus_key[i] = "King Tut"
  }
  else if (data.filtered.trivia$correct_response[i] == 8) {
    data.filtered.trivia$stimulus_key[i] = "Arctic"
  }
  else if (data.filtered.trivia$correct_response[i] == 12) {
    data.filtered.trivia$stimulus_key[i] = "calendar"
  }
  else if (data.filtered.trivia$correct_response[i] == 11) {
    data.filtered.trivia$stimulus_key[i] = "soccer"
  }
  else {
  }
}
```

```{r}
#| Label: merge back to data.filtered.correct
#| echo: false
#| message: false
#| warning: false

data.filtered.trivia <- data.filtered.trivia %>%
  select(c('trial_index', 'session_id', 'stimulus_key'))

data.filtered.correct <- left_join(data.filtered.correct, data.filtered.trivia, by=c('trial_index', 'session_id'))

data.filtered.correct$stimulus_key <- coalesce(data.filtered.correct$stimulus_key.x, data.filtered.correct$stimulus_key.y)

data.filtered.correct$correct_response <- as.numeric(data.filtered.correct$correct_response)

data.filtered.correct$correct_answer <- coalesce(data.filtered.correct$question_correct_answer, data.filtered.correct$correct_response)

data.filtered.correct <- data.filtered.correct %>%
  select(c('trial_index', 'session_id', 'task', 'trial_type', 'stimulus_key', 'correct_answer', 'trivia_difference', 'fractal_correct', 'prediction_num', 'curiosity_num', 'prior_knowledge_num', 'fractal_img'))

```

```{r}
#| label: calculate IPE values in separate dataframe. There is a single row where the prediction entered by the subject is so large that the difference between their answer and the correct answer is computed to NA in R. We thus hard-coded the actual difference value in the if statement below.
#| echo: false
#| include: false
#| message: false

data.filtered.IPE <- data.filtered.correct %>%
  filter(task == "prediction") %>%
  mutate(IPE = NA)

for (i in 1:nrow(data.filtered.IPE)) {
  data.filtered.IPE$IPE[i] = abs(data.filtered.IPE$correct_answer[i] - data.filtered.IPE$prediction_num[i])
  if (is.na(data.filtered.IPE$IPE[i])) {
    data.filtered.IPE$IPE[i] = 437289472301
  }
}
```

```{r}
#| label: join the IPE column back into main dataframe
#| echo: false
#| include: false
#| message: false

data.filtered.IPE.simplified <- data.filtered.IPE %>%
  filter(!is.na(IPE)) %>%
  select(c('trial_index', 'session_id', "IPE"))

data.filtered.correct <- left_join(data.filtered.correct, data.filtered.IPE.simplified, by = c('session_id', 'trial_index'))

data.filtered.correct <- data.filtered.correct %>%
  select(c('trial_index', 'session_id', "task", "trial_type", "stimulus_key", "curiosity_num", "prior_knowledge_num", "prediction_num", "correct_answer", "IPE", "trivia_difference", "fractal_correct","fractal_img"))
```

```{r}
#| label: Exclude Subjects Who Got >20 Questions Correct in the Initial Round. Someone got all of them wrong therefore only 79 rows!
#| message: false
#| echo: false

data.smart.subs <- data.filtered.IPE.simplified %>%
  group_by(session_id) %>%
  count(IPE == 0) %>%
  filter(`IPE == 0` == "TRUE")
```

```{r}
#| label: Exclude Subjects Who Do Not Have Variable Responses to Write-in/Scale Questions
#| message: false
#| echo: false

data.consistent.subs <- data.filtered.correct %>%
  filter(task == "prediction") %>%
  group_by(session_id) %>%
  summarize(unique_predictions = n_distinct(prediction_num))
```

### Z-Scores

```{r}
#| label: Prediction Error Z-Scores (each participant AND each question)
#| message: false
#| echo: false
#| warning: false


z.scores.IPE <- data.filtered.correct %>%
  filter(task == "prediction") %>%
  select(c(trial_index, session_id, stimulus_key, IPE)) %>%
  group_by(stimulus_key) %>%
  mutate(IPE_mean = mean(IPE)) %>%
  mutate(IPE_sd = sd(IPE)) %>%
  mutate(z_score_IPE = (IPE - IPE_mean) / IPE_sd)

ggplot(z.scores.IPE, aes(x = session_id, y = z_score_IPE)) +
  geom_point(size = 0.5) +
  facet_wrap(~ stimulus_key) + 
  labs(caption = "")
```

```{r}
#| label: 10 trivia questions Z-Scores (each participant AND each question)
#| message: false
#| echo: false
#| warning: false

z.scores.trivia <- data.filtered.correct %>%
  filter(task == "trivia" & !is.na(stimulus_key)) %>%
  select(c(trial_index, session_id, stimulus_key, trivia_difference)) %>%
  group_by(stimulus_key) %>%
  mutate(trivia_difference_mean = mean(trivia_difference)) %>%
  mutate(trivia_difference_sd = sd(trivia_difference)) %>%
  mutate(z_score_trivia = (trivia_difference - trivia_difference_mean) / trivia_difference_sd)

ggplot(z.scores.trivia, aes(x = session_id, y = z_score_trivia)) +
  geom_point(size = 0.5) +
  facet_wrap(~ stimulus_key) + 
  labs(caption = "")
```

```{r}
#| label: Curiosity Z-Scores (each participant)
#| message: false
#| echo: false
#| warning: false


z.scores.curiosity <- data.filtered.correct %>%
  filter(task == "likert") %>%
  select(trial_index, session_id, stimulus_key, curiosity_num) %>%
  group_by(session_id) %>%
  mutate(curiosity_mean = mean(curiosity_num)) %>%
  mutate(curiosity_sd = sd(curiosity_num)) %>%
  mutate(z_score_curiosity = (curiosity_num - curiosity_mean) / curiosity_sd)

ggplot(z.scores.curiosity, aes(x = stimulus_key, y = z_score_curiosity)) +
  geom_point(size = 0.5) +
  facet_wrap(~ session_id) + 
  labs(caption = "")
```

### Regressions

```{r}
#| label: merge curiosity z score and IPE z score into trivia dataframe
#| message: false
#| echo: false

data.filtered.trivia.simplified <- z.scores.trivia %>%
  select(c('session_id', 'stimulus_key', 'z_score_trivia'))

z.scores.curiosity.simplified <- z.scores.curiosity %>%
  select(c('session_id', 'stimulus_key', 'z_score_curiosity'))

z.scores.IPE.simplified <- z.scores.IPE %>%
  select(c('session_id', 'stimulus_key', 'z_score_IPE'))

data.filtered.regression.merged <- left_join(drop_na(na.omit(data.filtered.trivia.simplified)), z.scores.curiosity.simplified, by = c('session_id', 'stimulus_key'))

data.filtered.regression.merged <- left_join(data.filtered.regression.merged, z.scores.IPE.simplified, by = c('session_id', 'stimulus_key'))

data.filtered.regression.merged <- drop_na(na.omit(data.filtered.regression.merged))
```

```{r}
#| label: Explicit Memory Regression
#| message: false
#| echo: false

explicit.memory.regression <- lm(data.filtered.regression.merged$z_score_trivia ~ data.filtered.regression.merged$z_score_curiosity + data.filtered.regression.merged$z_score_IPE + (data.filtered.regression.merged$z_score_curiosity * data.filtered.regression.merged$z_score_IPE))
```

```{r}
#| label: Explicit Memory Regression Plot
#| message: false
#| echo: false

ggplot(data.filtered.regression.merged, aes(x = z_score_IPE, y = z_score_trivia)) +
  geom_point(size = 0.5) +
  geom_smooth() + 
  ggtitle("The effects of prediction error on explicit memory") + 
  theme(plot.title = element_text(hjust = 0.5)) + 
  labs(caption = "")
```

```{r}
#| label: get fractal image number for each fractal trial across all subjects
#| echo: false
#| include: false
#| message: false

data.filtered.fractals <- filter(data.filtered.correct, task == "fractal_response" & !is.na(fractal_correct)) %>%
  select(c('session_id', 'fractal_correct', 'fractal_img'))

stimulus.key.fractal.pair <- data.filtered.correct %>%
  filter(!is.na(fractal_img)) %>%
  filter(task != "fractal_response") %>%
  select(c("session_id","stimulus_key","fractal_img"))

data.filtered.fractals.merged <- left_join(data.filtered.fractals, stimulus.key.fractal.pair, by=c("session_id","fractal_img")) %>%
  select(-c("fractal_img"))

data.filtered.implicit <- left_join(data.filtered.fractals.merged, z.scores.curiosity.simplified, by=c("session_id","stimulus_key"))

data.filtered.implicit.merged <- left_join(data.filtered.implicit, z.scores.IPE.simplified, by=c("session_id","stimulus_key")) %>%
  select(-c("stimulus_key"))

data.filtered.implicit.merged$fractal_correct = as.numeric(data.filtered.implicit.merged$fractal_correct)
```

```{r}
#| label: Incidental Memory Regression
#| message: false
#| echo: false


implicit.memory.regression <- lm(data.filtered.implicit.merged$fractal_correct ~ data.filtered.implicit.merged$z_score_curiosity + data.filtered.implicit.merged$z_score_IPE + (data.filtered.implicit.merged$z_score_curiosity * data.filtered.implicit.merged$z_score_IPE))
```

## Discussion

## References

Cervera, R. L., Wang, M. Z., & Hayden, B. Y. (2020). Systems neuroscience of curiosity. Current Opinion in Behavioral Sciences, 35, 48--55. https://doi.org/10.1016/j.cobeha. 2020.06.011

Fernández, R. S., Boccia, M. M., & Pedreira, M. E. (2016). The fate of memory: Reconsolidation and the case of prediction error. Neuroscience & Biobehavioral Reviews, 68, 423--441. https://doi.org/10.1016/j.neubiorev.2016.06.004

Gruber, M. J., Gelman, B. D., & Ranganath, C. (2014). States of curiosity modulate hippocampus-dependent learning via the dopaminergic circuit. Neuron, 84(2), 486--496. https://doi.org/10.1016/j.neuron.2014.08.060

Kang, M. J., Hsu, M., Krajbich, I. M., Loewenstein, G., McClure, S. M., Wang, J. T., & Camerer, C. F. (2009). The Wick in the Candle of Learning: Epistemic Curiosity Activates Reward Circuitry and Enhances Memory. Psychological Science, 20(8), 963--973. https://doi.org/10.1111/j.1467-9280.2009.02402

van Lieshout, L. L. F., de Lange, F. P., & Cools, R. (2020). Why so curious? quantifying mechanisms of information seeking. Current Opinion in Behavioral Sciences, 35, 112--117. https://doi.org/10.1016/j.cobeha.2020.08.005

Wade, S., & Kidd, C. (2019). The role of prior knowledge and curiosity in learning. Psychonomic Bulletin & Review, 26(4), 1377--1387. https://doi.org/10.3758/s13423 -019-01598-6
