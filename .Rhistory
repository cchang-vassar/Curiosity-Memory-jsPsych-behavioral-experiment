#| echo: false
#| include: false
data.filtered.IPE.simplified <- data.filtered.IPE %>%
filter(!is.na(IPE)) %>%
select(c('trial_index', 'session_id', "IPE"))
data.filtered.correct <- left_join(data.filtered.correct, data.filtered.IPE.simplified, by = c('session_id', 'trial_index'))
data.filtered.correct <- data.filtered.correct %>%
select(c('trial_index', 'session_id', "task", "trial_type", "stimulus_key", "curiosity_num", "prior_knowledge_num", "prediction_num", "correct_answer", "IPE", "trivia_difference", "fractal_correct"))
#| label: Exclude Subjects Who Got >20 Questions Correct in the Initial Round
#| someone got all of them wrong therefore only 79 rows!
#| message: false
#| echo: false
data.smart.subs <- data.filtered.IPE.simplified %>%
group_by(session_id) %>%
count(IPE == 0) %>%
filter(`IPE == 0` == "TRUE")
#| label: Exclude Subjects Who Do Not Have Variable Responses to Write-in/Scale Questions
#| message: false
#| echo: false
data.consistent.subs <- data.filtered.correct %>%
filter(task == "prediction") %>%
group_by(session_id) %>%
summarize(unique_predictions = n_distinct(prediction_num))
#| label: Prediction Error Z-Scores (each participant AND each question)
#| message: false
#| echo: false
z.scores.IPE <- data.filtered.correct %>%
filter(task == "prediction") %>%
select(c(trial_index, session_id, stimulus_key, IPE)) %>%
group_by(stimulus_key) %>%
mutate(IPE_mean = mean(IPE)) %>%
mutate(IPE_sd = sd(IPE)) %>%
mutate(z_score_IPE = (IPE - IPE_mean) / IPE_sd)
ggplot(z.scores.IPE, aes(x = session_id, y = z_score_IPE)) +
geom_point(size = 0.5) +
facet_wrap(~ stimulus_key)
#| label: Curiosity Z-Scores (each participant)
#| message: false
#| echo: false
z.scores.curiosity <- data.filtered.correct %>%
filter(task == "likert") %>%
select(trial_index, session_id, stimulus_key, curiosity_num) %>%
group_by(session_id) %>%
mutate(curiosity_mean = mean(curiosity_num)) %>%
mutate(curiosity_sd = sd(curiosity_num)) %>%
mutate(z_score_curiosity = (curiosity_num - curiosity_mean) / curiosity_sd)
ggplot(z.scores.curiosity, aes(x = stimulus_key, y = z_score_curiosity)) +
geom_point(size = 0.5) +
facet_wrap(~ session_id)
#| label: merge curiosity z score and IPE z score into trivia dataframe
#| message: false
#| echo: false
data.filtered.trivia.simplified <- data.filtered.correct %>%
filter(task == 'trivia') %>%
select(c('session_id', 'stimulus_key', 'trivia_difference'))
z.scores.curiosity.simplified <- z.scores.curiosity %>%
select(c('session_id', 'stimulus_key', 'z_score_curiosity'))
z.scores.IPE.simplified <- z.scores.IPE %>%
select(c('session_id', 'stimulus_key', 'z_score_IPE'))
data.filtered.regression.merged <- left_join(drop_na(data.filtered.trivia.simplified), z.scores.curiosity.simplified, by = c('session_id', 'stimulus_key'))
data.filtered.regression.merged <- left_join(data.filtered.regression.merged, z.scores.IPE.simplified, by = c('session_id', 'stimulus_key'))
#| data.filtered.trivia.merged <- drop_na(data.filtered.trivia.merged)
#| label: Explicit Memory Regression
#| message: false
#| echo: false
explicit.memory.regression <- lm(data.filtered.regression.merged$trivia_difference ~ data.filtered.regression.merged$z_score_curiosity + data.filtered.regression.merged$z_score_IPE + (data.filtered.regression.merged$z_score_curiosity * data.filtered.regression.merged$z_score_IPE))
View(explicit.memory.regression)
#| label: merge curiosity z score and IPE z score into trivia dataframe
#| message: false
#| echo: false
data.filtered.trivia.simplified <- data.filtered.correct %>%
filter(task == 'trivia') %>%
select(c('session_id', 'stimulus_key', 'trivia_difference'))
z.scores.curiosity.simplified <- z.scores.curiosity %>%
select(c('session_id', 'stimulus_key', 'z_score_curiosity'))
z.scores.IPE.simplified <- z.scores.IPE %>%
select(c('session_id', 'stimulus_key', 'z_score_IPE'))
data.filtered.regression.merged <- left_join(drop_na(data.filtered.trivia.simplified), z.scores.curiosity.simplified, by = c('session_id', 'stimulus_key'))
data.filtered.regression.merged <- left_join(data.filtered.regression.merged, z.scores.IPE.simplified, by = c('session_id', 'stimulus_key'))
data.filtered.trivia.merged <- drop_na(data.filtered.trivia.merged)
View(data.filtered.regression.merged)
data.filtered.regression.merged <- drop_na(na.omit(data.filtered.regression.merged))
#| label: Explicit Memory Regression
#| message: false
#| echo: false
explicit.memory.regression <- lm(data.filtered.regression.merged$trivia_difference ~ data.filtered.regression.merged$z_score_curiosity + data.filtered.regression.merged$z_score_IPE + (data.filtered.regression.merged$z_score_curiosity * data.filtered.regression.merged$z_score_IPE))
View(explicit.memory.regression)
#| label: get fractal image number for each fractal trial across all subjects
#| echo: false
#| include: false
data.filtered.fractals <- data.filtered.correct %>%
filter(task == "fractal")
#| label: get fractal image number for each fractal trial across all subjects
#| echo: false
#| include: false
data.filtered.fractals <- filter(data.filtered.correct, task == "fractal")
View(data.filtered.correct)
#| label: get fractal image number for each fractal trial across all subjects
#| echo: false
#| include: false
data.filtered.fractals <- filter(data.filtered.correct, task == "fractal_response")
View(data.filtered.fractals)
data.count <- filter(data.filtered.fractals, session_id == "643c24e5495da8126217377c")
data.count <- data.filtered.fractals %>%
group_by(session_id) %>%
count()
View(data.count)
View(data.filtered.correct)
data.filtered.fractals <- filter(data.filtered.correct, task == "fractal_response" & !is.na(fractal_correct))
data.filtered.fractals <- filter(data.filtered.correct, task == "fractal_response" & !is.na(fractal_correct)) %>%
select(c('trial_index', 'session_id', 'fractal_correct'))
data.filtered.fractals <- filter(data.filtered.correct, task == "fractal_response" & !is.na(fractal_correct))
View(data.filtered)
#| label: delete practice trials
#| echo: false
#| include: false
data <- data %>%
filter(trial_index %in% c(6:167))
#| label: filter out unnecessary columns
#| echo: false
#| include: false
data.filtered <- subset(data, select = c(trial_index, session_id, task, trial_type, stimulus, response, correct_response, difference, correct))
#| label: update task column to differentiate between prediction, likert, fractals and trivia
#| echo: false
#| include: false
for(i in 1:nrow(data.filtered)) {
if (!is.na(data.filtered$difference[i])) {
data.filtered$task[i] <- "trivia"
}
else if (data.filtered$trial_type[i] == "survey-text") {
data.filtered$task[i] <- "prediction"
}
else if (data.filtered$trial_type[i] == "survey") {
data.filtered$task[i] <- "likert"
}
else if (data.filtered$response[i] == 'f' || data.filtered$response[i] == 'j') {
data.filtered$task[i] <- "fractal_response"
}
else {
data.filtered$task[i] <- "NULL"
}
}
#| label: add correct answer back to each question asked in first 30 trials
#| echo: false
#| include: false
data.filtered.flips <- data.filtered %>%
filter(grepl("flip", data.filtered$stimulus)) %>%
mutate(stimulus_key = NA)
for (i in 1:nrow(data.filtered.flips)) {
if (grepl("iPhone", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "2007"
data.filtered.flips$stimulus_key[i] = "iPhone"
}
else if (grepl("Indian classical dance", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "28"
data.filtered.flips$stimulus_key[i] = "Indian classical dance"
}
else if (grepl("Stephen King", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "65"
data.filtered.flips$stimulus_key[i] = "Stephen King"
}
else if (grepl("diameter", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "7917.5"
data.filtered.flips$stimulus_key[i] = "diameter"
}
else if (grepl("Vietnamese", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "6"
data.filtered.flips$stimulus_key[i] = "Vietnamese"
}
else if (grepl("Berlin Wall", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1989"
data.filtered.flips$stimulus_key[i] = "Berlin Wall"
}
else if (grepl("Muslims", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "5"
data.filtered.flips$stimulus_key[i] = "Muslims"
}
else if (grepl("How many countries are in Africa?", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "54"
data.filtered.flips$stimulus_key[i] = "How many countries are in Africa?"
}
else if (grepl("Baker's Dozen", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "13"
data.filtered.flips$stimulus_key[i] = "Baker's Dozen"
}
else if (grepl("stitches", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "108"
data.filtered.flips$stimulus_key[i] = "stitches"
}
else if (grepl("constellations", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "88"
data.filtered.flips$stimulus_key[i] = "constellations"
}
else if (grepl("Frida", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1907"
data.filtered.flips$stimulus_key[i] = "Frida"
}
else if (grepl("Great Wall of China", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "13171"
data.filtered.flips$stimulus_key[i] = "Great Wall of China"
}
else if (grepl("human baby", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "300"
data.filtered.flips$stimulus_key[i] = "human baby"
}
else if (grepl("How many countries in Africa have French as the official language?", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "21"
data.filtered.flips$stimulus_key[i] = "How many countries in Africa have French as the official language?"
}
else if (grepl("titanic", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1912"
data.filtered.flips$stimulus_key[i] = "titanic"
}
else if (grepl("Catholic Bible", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "73"
data.filtered.flips$stimulus_key[i] = "Catholic Bible"
}
else if (grepl("Japan", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "4"
data.filtered.flips$stimulus_key[i] = "Japan"
}
else if (grepl("vegan", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "79"
data.filtered.flips$stimulus_key[i] = "vegan"
}
else if (grepl("Olympic", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1896"
data.filtered.flips$stimulus_key[i] = "Olympic"
}
else if (grepl("Neptune", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "14"
data.filtered.flips$stimulus_key[i] = "Neptune"
}
else if (grepl("sonnet", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "14"
data.filtered.flips$stimulus_key[i] = "sonnet"
}
else if (grepl("Nobel", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1901"
data.filtered.flips$stimulus_key[i] = "Nobel"
}
else if (grepl("kangaroos", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "4"
data.filtered.flips$stimulus_key[i] = "kangaroos"
}
else if (grepl("Burj Khalifa", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "163"
data.filtered.flips$stimulus_key[i] = "Burj Khalifa"
}
else if (grepl("King Tut", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "19"
data.filtered.flips$stimulus_key[i] = "King Tut"
}
else if (grepl("bar mitzvah", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "13"
data.filtered.flips$stimulus_key[i] = "bar mitzvah"
}
else if (grepl("Arctic", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "8"
data.filtered.flips$stimulus_key[i] = "Arctic"
}
else if (grepl("calendar", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "12"
data.filtered.flips$stimulus_key[i] = "calendar"
}
else if (grepl("soccer", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "11"
data.filtered.flips$stimulus_key[i] = "soccer"
}
}
data.filtered.flips <- data.filtered.flips %>%
select(c('stimulus', 'stimulus_key', 'correct_answer'))
#| label: join the correct answer column back into main dataframe
#| echo: false
#| include: false
data.filtered.correct <- left_join(data.filtered, data.filtered.flips, by="stimulus")
data.filtered.correct <- data.filtered.correct %>%
mutate(question_correct_answer = as.numeric(correct_answer)) %>%
mutate(trivia_difference = as.numeric(difference)) %>%
mutate(fractal_correct = correct)
View(data.filtered.correct)
data.filtered.correct <- data.filtered.correct %>%
mutate(fractal_img = NA)
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response") %>%
mutate(fractal_img = NA)
View(data.filtered.fractals.trials)
for (i in 1:nrow(data.filtered.fractals.trials)) {
if (grepl("img/1.png", data.filtered.fractals.trials$stimulus[i])) {
data.filtered.fractals.trials$stimulus_key[i] = 1
}
#| label: delete practice trials
#| echo: false
#| include: false
data <- data %>%
filter(trial_index %in% c(6:167))
data <- data %>%
filter(trial_index %in% c(6:167))
#| label: filter out unnecessary columns
#| echo: false
#| include: false
data.filtered <- subset(data, select = c(trial_index, session_id, task, trial_type, stimulus, response, correct_response, difference, correct))
#| label: update task column to differentiate between prediction, likert, fractals and trivia
#| echo: false
#| include: false
for(i in 1:nrow(data.filtered)) {
if (!is.na(data.filtered$difference[i])) {
data.filtered$task[i] <- "trivia"
}
else if (data.filtered$trial_type[i] == "survey-text") {
data.filtered$task[i] <- "prediction"
}
else if (data.filtered$trial_type[i] == "survey") {
data.filtered$task[i] <- "likert"
}
else if (data.filtered$response[i] == 'f' || data.filtered$response[i] == 'j') {
data.filtered$task[i] <- "fractal_response"
}
else {
data.filtered$task[i] <- "NULL"
}
}
#| label: add correct answer back to each question asked in first 30 trials
#| echo: false
#| include: false
data.filtered.flips <- data.filtered %>%
filter(grepl("flip", data.filtered$stimulus)) %>%
mutate(stimulus_key = NA)
for (i in 1:nrow(data.filtered.flips)) {
if (grepl("iPhone", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "2007"
data.filtered.flips$stimulus_key[i] = "iPhone"
}
else if (grepl("Indian classical dance", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "28"
data.filtered.flips$stimulus_key[i] = "Indian classical dance"
}
else if (grepl("Stephen King", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "65"
data.filtered.flips$stimulus_key[i] = "Stephen King"
}
else if (grepl("diameter", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "7917.5"
data.filtered.flips$stimulus_key[i] = "diameter"
}
else if (grepl("Vietnamese", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "6"
data.filtered.flips$stimulus_key[i] = "Vietnamese"
}
else if (grepl("Berlin Wall", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1989"
data.filtered.flips$stimulus_key[i] = "Berlin Wall"
}
else if (grepl("Muslims", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "5"
data.filtered.flips$stimulus_key[i] = "Muslims"
}
else if (grepl("How many countries are in Africa?", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "54"
data.filtered.flips$stimulus_key[i] = "How many countries are in Africa?"
}
else if (grepl("Baker's Dozen", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "13"
data.filtered.flips$stimulus_key[i] = "Baker's Dozen"
}
else if (grepl("stitches", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "108"
data.filtered.flips$stimulus_key[i] = "stitches"
}
else if (grepl("constellations", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "88"
data.filtered.flips$stimulus_key[i] = "constellations"
}
else if (grepl("Frida", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1907"
data.filtered.flips$stimulus_key[i] = "Frida"
}
else if (grepl("Great Wall of China", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "13171"
data.filtered.flips$stimulus_key[i] = "Great Wall of China"
}
else if (grepl("human baby", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "300"
data.filtered.flips$stimulus_key[i] = "human baby"
}
else if (grepl("How many countries in Africa have French as the official language?", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "21"
data.filtered.flips$stimulus_key[i] = "How many countries in Africa have French as the official language?"
}
else if (grepl("titanic", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1912"
data.filtered.flips$stimulus_key[i] = "titanic"
}
else if (grepl("Catholic Bible", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "73"
data.filtered.flips$stimulus_key[i] = "Catholic Bible"
}
else if (grepl("Japan", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "4"
data.filtered.flips$stimulus_key[i] = "Japan"
}
else if (grepl("vegan", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "79"
data.filtered.flips$stimulus_key[i] = "vegan"
}
else if (grepl("Olympic", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1896"
data.filtered.flips$stimulus_key[i] = "Olympic"
}
else if (grepl("Neptune", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "14"
data.filtered.flips$stimulus_key[i] = "Neptune"
}
else if (grepl("sonnet", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "14"
data.filtered.flips$stimulus_key[i] = "sonnet"
}
else if (grepl("Nobel", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "1901"
data.filtered.flips$stimulus_key[i] = "Nobel"
}
else if (grepl("kangaroos", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "4"
data.filtered.flips$stimulus_key[i] = "kangaroos"
}
else if (grepl("Burj Khalifa", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "163"
data.filtered.flips$stimulus_key[i] = "Burj Khalifa"
}
else if (grepl("King Tut", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "19"
data.filtered.flips$stimulus_key[i] = "King Tut"
}
else if (grepl("bar mitzvah", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "13"
data.filtered.flips$stimulus_key[i] = "bar mitzvah"
}
else if (grepl("Arctic", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "8"
data.filtered.flips$stimulus_key[i] = "Arctic"
}
else if (grepl("calendar", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "12"
data.filtered.flips$stimulus_key[i] = "calendar"
}
else if (grepl("soccer", data.filtered.flips$stimulus[i])) {
data.filtered.flips$correct_answer[i] = "11"
data.filtered.flips$stimulus_key[i] = "soccer"
}
}
data.filtered.flips <- data.filtered.flips %>%
select(c('stimulus', 'stimulus_key', 'correct_answer'))
#| label: join the correct answer column back into main dataframe
#| echo: false
#| include: false
data.filtered.correct <- left_join(data.filtered, data.filtered.flips, by="stimulus")
data.filtered.correct <- data.filtered.correct %>%
mutate(question_correct_answer = as.numeric(correct_answer)) %>%
mutate(trivia_difference = as.numeric(difference)) %>%
mutate(fractal_correct = correct)
data.filtered.correct <- data.filtered.correct %>%
select(c(trial_index, session_id, task, trial_type, stimulus_key, stimulus, response, question_correct_answer, correct_response, trivia_difference, fractal_correct)) %>%
group_by(session_id) %>%
distinct(trial_index, .keep_all = TRUE)
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response" | grepl("flip_card", stimulus))
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response" | grepl("flip_card", stimulus) & !((task == "fractal_response") & is.na(fractal_correct)))
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response" | grepl("flip_card", stimulus))
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response" | grepl("flip_card", stimulus)) %>%
filter(!((task == "fractal_response") & is.na(fractal_correct)))
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response" | grepl("flip_card", stimulus)) %>%
filter(!((task == "fractal_response") & is.na(fractal_correct))) %>%
mutate(fractal_img = NA)
for (i in 1:nrow(data.filtered.fractals.trials)) {
if (grepl("img/1.png", data.filtered.fractals.trials$stimulus[i])) {
data.filtered.fractals.trials$stimulus_key[i] = 1
}
grepl("img/29", data.filtered.fractals.trials$stimulus[1])
for (i in 1:nrow(data.filtered.fractals.trials)) {
if (grepl("img/29.png", data.filtered.fractals.trials$stimulus[i])) {
data.filtered.fractals.trials$stimulus_key[i] = 29
}
data.filtered.fractals.trials <- data.filtered.correct %>%
filter(task == "fractal_response" | grepl("flip_card", stimulus)) %>%
filter(!((task == "fractal_response") & is.na(fractal_correct))) %>%
mutate(fractal_img = NA)
for (i in 1:nrow(data.filtered.fractals.trials)) {
if (grepl("img/29.png", data.filtered.fractals.trials$stimulus[i])) {
data.filtered.fractals.trials$fractal_img[i] = 29
}
for (i in 1:nrow(data.filtered.fractals.trials)) {
if (grepl("img/29", data.filtered.fractals.trials$stimulus[i])) {
data.filtered.fractals.trials$fractal_img[i] = 29
}
for (i in 1:nrow(data.filtered.fractals.trials)) {
data.filtered.fractals.trials$fractal_img[i] = 29
for (i in 1:nrow(data.filtered.fractals.trials)) {
data.filtered.fractals.trials$fractal_img[i] = 29
View(data.filtered.fractals.trials)
View(data.filtered.fractals.trials)
View(data.filtered.fractals.trials)
for (i in 1:nrow(data.filtered.fractals.trials)) {
data.filtered.fractals.trials$fractal_img[i] = 29
View(data.filtered.fractals.trials)
for (i in 1:nrow(data.filtered.fractals.trials)) {
if (grepl("div", data.filtered.fractals.trials$stimulus[i])) {
data.filtered.fractals.trials$fractal_img[i] = 29
}
